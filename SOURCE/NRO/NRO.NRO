.. $Id: NRO.NRO 1.8 1997/01/27 06:21:33 ska Exp $
.TH NRO 1 "FreeDos Version"
.SH NAME
nro - text processor
.SH SYNOPSIS
.bo
nro [-n] [+n] [-pxx] [-v] [-u] [-b] [-mmfile] ifile ... [>ofile]
.SH DESCRIPTION
.ul
NRO
is a text processor and formatter based on the design
provided in 
.bo
"Software Tools"
by Kernighan and Plauger.
The text and commands found in the
.cu
ifile(s)
are processed to
generate formatted text.
The output may be directed into a file or to the printer,
otherwise, the output will appear at
the user console.
.sp
The
.ul
+n
option causes the output to start with page
.ul
n.
The
.ul
-n
option causes the output to stop after page
.ul
n.
.sp
The
.ul
-v
option prints the version number to the console.
.sp
The
.ul
-p
option causes the output to be shifted to the right by
.ul
xx
spaces.
This has the same effect as the
.cc +
+bo
.po
command.
+cc .
.sp
The
.ul
-u
option enables underlining and bold to appear in the output text.
.sp
The
.ul
-b
option allows backspaces to be used when
underlining or overstriking.  Otherwise a carriage return without
linefeed is used.  
This has the same effect as the
.cc +
+bo
.bs
command with a non-zero argument.
+cc .
.sp
The
.ul
-m
option processes the file
.ul
mfile
for macro definitions.
Note that files processed in this way should contain only macro
definitions, no immediate output should be generated from this file.
.br
If to open the file fails, it is searched in the directory where
the executable
.ul
NRO
resides.
.sp
There are commands that only differ if they work
.ul
continuously
or not, e.g.
.cc !
!cb
.cb
and
!cb
.bo
!ct . The continuous one effects any character except control characters,
the non-continuous one effects only letters and digits. Both commands can
be intermixed, they share the same counter of how many lines are to be
effected, but the last command predicts, whether to work continuously or
not; e.g.:
!br
!in +4
.cb 4
!br
1st continuous bold line
!br
2nd continuous bold line
!br
.bo +1
!br
1st non-continuous bold line
!br
2nd non-continuous bold line
!br
3rd non-continuous bold line
!br
!in -5
!cc
.sp
Commands typically are distinguished by a period in column one of the input
followed by a two character abbreviation for the command funtion.
The abbreviation may then be followed by an optional numeric or
character argument.
The numeric argument may be an absolute value such as setting
the right margin to a particular column, or the argument may be
preceded by a plus sign or a minus sign to indicate that the
parameter should be modified relative to a previous setting.
The following commands are recognized:
.sp
.nj
.in +6
.br
.ti -6
.cc !
.. - comment line. Lets
!ul
NRO
ignore this line completely.
!sp
!ti -6
.bo - causes the following lines of text to appear in
boldface.
The optional argument specifies the number of lines to
be typed in boldface.
Only letters and numbers are effected by this command.
This command cancels the effect of a previous
!cb
.cb
command.
!sp
!ti -6
.bp - causes succeeding text to appear at the top of
a new page.
The optional argument specifies the page number for the new page.
The initial value is one and the default value is one more than
the previous page number.
!sp
!ti -6
.br - causes succeeding text to start on a new line at the
current left margin.
There is no numeric argument for this command.
!sp
!ti -6
.bs - enables or disables the appearance of backspaces
in the output text.
Underlining and boldface options are implemented by inserting
character - backspace - character combinations into the output
buffer.
This is fine for devices which properly recognize the backspace
character.
Some printers, however, do not recognize backspaces, so the option is
provided to overprint one line buffer with another.
The first line buffer is terminated with just a carriage return
rather than the carriage return - linefeed combination.
A zero argument or no argument to the backspace command removes
backspaces from the output.
A non-zero argument leaves them in the output.
The default is to remove backspaces.
!sp
!ti -6
.cc - changes the
!ul
NRO
command character to that specified by the character argument.
If no argument is provided, the default is a period.
!sp
!ti -6
.cb - causes the following lines of text to appear in
boldface.
The optional argument specifies the number of lines to
be typed in boldface.
In opposite to the
!cb
.bo
command all characters are effected.
This command cancels the effect of a previous
!cb
.bo
command.
!sp
!ti -6
.ce - causes the next line of text to appear centered on the output.
The optional argument specifies if more than one line is to be centered.
!sp
!ti -6
.ct - concats the following word with the preceeding one.
The remaining characters on the line will be interpreted as normal text, thus,
if the first character is the command character (see
!cb
.cc
!ct ), it will appended, what is very useful to append a dot to indicate the
end of a sentence, for example:
!br
!in +5
This is a
!br
.cb
!br
*test*
!br
.ct .
!br
!ti -5
results in:
!br
This is a
!cb
*test*
!ct .
!br
!in -5
But the dot itself remains in plain shape and is also not interpreted
as the command character.
!sp
!ti -6
.cu - causes the next line(s) of text to be continuously underlined.
Unlike the underline command (see
!cb
.ul
!ct ) which underlines only alphanumerics, continuous underlining underlines
all printable characters.
The optional argument specifies the number of lines of text to underlined.
This command cancels the effect of a previous
!cb
.ul
command.
!sp
!ti -6
.de - causes all text and commands following to be used to define
a macro.
The definition is terminated by a
!cb
.en
command.
The first two characters of the argument following the
!cb
.de
command become the name of the new command.
It should be noted that upper and lower case arguments are considered
different.
Thus, the commands
!cb
.PP
and
!cb
.pp
could define two different macros.
Care should be exercised since existing commands may be redefined.
!sp
A macro may contain up to ten arguments.
In the macro definition, the placement of arguments is designated by the
two character sequences, $0, $1, ... $9.
When the macro is invoked, each argument of the macro command line is
substituted for its corresponding designator in the expansion.
The first argument of the macro command is substituted for the $0
in the expansion, the second argument for the $1, and so forth.
Arguments are typically strings which do not contain blanks or tabs.
If an argument is to contain blanks, then it should be surrounded by
either single or double quotes. 
!sp
!ti -6
.ef - specifies the text for the footer on even numbered pages.
The format is the same as for the footer command (see
!cb
.fo
!ct ).
!sp
!ti -6
.eh - specifies the text for the header on even numbered pages.
The format is the same as for the footer command (see
!cb
.fo
!ct ).
!sp
!ti -6
.en - designates the end of a macro definition.
!sp
!ti -6
.fi - causes the input text to be rearranged or filled to obtain the
maximum word count possible between the previously set left and
right margins.
No argument is expected.
!sp
!ti -6
.fo - specifies text to be used for a footer.
The footer text contains three strings seperated by a delimiter
character.
The first non-blank character following the command is designated
as the delimiter.
The first text string is left justified to the current indentation
value (specified by
!cb
.in
!ct ). The second string is centered between the current indentation value
and the current right margin value (specified by
!cb
.rm
!ct
).
The third string is right justified to the current right margin value.
The absence of footer text will result in the footer being printed as
one blank line.
The presence of the page number character (set by
!cb
.pc
!ct ) in the footer text results
in the current page number being inserted at that position.
Multiple occurrances of the page number character are allowed.
!sp
!ti -6
.he - specifies text to be used for a header.
The format is the same as for the footer (see
!cb
.fo
!ct ).
!sp
!ti -6
.in - indents the left margin to the column value specified by the argument.
The default left margin is set to zero.
!sp
!ti -6
.ju - causes blanks to be inserted between words in a line of
output in order to align or justify the right margin.
The default is to justify.
!sp
!ti -6
.ls - sets the line spacing to the value specified by the argument.
The default is for single spacing.
!sp
!ti -6
.m1 - specifies the number of lines in the header margin.
This is the space from the physical top of page to and including
the header text.
A value of zero causes the header to not be printed.
A value of one causes the header to appear at the physical top of page.
Larger argument values cause the appropriate number of blank
lines to appear before the header is printed.
!sp
!ti -6
.m2 - specifies the number of blank lines to be printed between
the header line and the first line of the processed text.
!sp
!ti -6
.m3 - specifies the number of blank lines to be printed between
the last line of processed text and the footer line.
!sp
!ti -6
.m4 - specifies the number of lines in the footer margin.
This command affects the footer the same way the
!cb
.m1
command
affects the header.
!sp
!ti -6
.ne - specifies a number of lines which should not be broken
across a page boundary.
If the number of lines remaining on a page is less than the
value needed, then a new output page is started.
!sp
!ti -6
.nf - specifies that succeeding text should be printed without
rearrangement, or with no fill.
No argument is expected.
!sp
!ti -6
.nj - specifies that no attempt should be made to align or justify
the right margin.
No argument is expected.
!sp
!ti -6
.nr - causes the value of a number register to be set or modified.
A total of twenty-six number registers are available designated
@@na through @@nz (either upper or lower case is allowed).
When the sequence @@nc is imbedded in the text, the current value
of number register c replaces the sequence, thus, such things as
paragraph numbering can be accomplished with relative ease.
!sp
!ti -6
.of - specifies the text for the footer on odd numbered pages.
The format is the same as the footer command (see
!cb
.fo
!ct
).
!sp
!ti -6
.oh - specifies the text for the header on odd numbered pages.
The format is the same as the footer command (see
!cb
.fo
!ct
).
!sp
!ti -6
.pc - specifies the page number character to be used in headers
and footers.
The occurrance of this character in the header or footer text
results in the current page number being printed.
The default for this character is the hash mark (#).
!sp
!ti -6
.pl - specifies the page lenght or the number of lines per output page.
The default is sixty-six.
!sp
!ti -6
.po - specifies a page offset value.
This allows the formatted text to be shifted to the right by
the number of spaces specified.
This feature may also be invoked by a switch on the command line.
!sp
!ti -6
.rm - sets the column value for the right margin.
The default is eighty.
!sp
!ti -6
.so - causes input to be retrieved from the file specified
by the command's character string argument.
The contents of the new file are inserted into the output
stream until an EOF is detected.
Processing of the original file is then resumed.
Command nesting is allowed.
!sp
!ti -6
.sp - specifies a number of blank lines to be output before
printing the next line of text.
!sp
!ti -6
.tb - tabulate to the next tabstop or to a fixed column.
!br
If this command has no argument at all, the line is filled up to the next
tabstop. If last character already stands onto a tabstop, the next one is choosen.
If there is no tabstop available, at least the delimiter or one space
will be inserted, but no line break is issued.
!br
Otherwise, the argument specifies the column to tabulate to. The column is
interpreted relative to the current
!cb
.in
value rather than as a absolute position or relative to the
!cb
.ti
value. Thus, the command
!cb
.tb 0
means to tabulate to the column, where the normal text begins. If the last
character already stands right of the desired column, at least the delimiter
or one space will be inserted, but no line break is issued.
!br
For examples and the format of the argument see the
!cb
.ts
command.
!sp
!ti -6
.ti - temporarily alters the indentation or left margin value for a single
succeeding line of text.
!sp
!ti -6
.ts - set the tabstops.
!br
There are three ways to define tabstops:
!br
1)
!cb
.ts
- without any arguments. This will clear all tabstops and set a single
tabstop at position 0 with no delimiter and left justify.
!br
2)
!cb
.ts *
!cu
!ct #
!ct [
!cb
!ct /
!cu
!ct ?
!ct ] [
!cu
!ct &
!ct ] - up to two arguments, the first always starting with
!cb
*
!ct . This will clear all tabstops like 1) and sets further tabstops that way
that each column of the table is
!cu
#
characters wide. The delimiter does not count. All tabstops receive the
same delimiter character
!cu
?
and the type of the justify
!cu
&
!ct.
!br
3)
!cb
.ts
{
!cb
+
|
!cb
-
!cu
!ct #
| [
!cu
!ct
&
!ct ]
!cu
!ct #
!ct [
!cb
!ct /
!cu
!ct ?
!ct ] } - an arbitary amount of arguments. This modifies the current used tabstops.
If the first argument does neither start with the
!cb
+
character nor with the
!cb
-
character, all tabstops are cleared as 1) does. Despite of that, all arguments
starting with
!cb
+
are ignore completely. The 
!cb
-
character orders to delete the tabstop at column
!cu
#
!ct . The other arguments add a new tabstop or alter an existing one.
!sp
Each tabstop can have a
!ul
type.
In the above synopsises it is marked with
!cu
#
!ct . The type tells
!ul
NRO
how to justify the text left of this tabstop. There are the following types:
!br
a)
!cb
>
right justify. There will be filled in as many spaces in front of the text
that the last character stands in the column of the tabstop.
!br
b)
!cb
|
center. There will be filled in as many spaces in front of and behind the text
that the column of the tabstop has been reached. In some cases one space is
inserted more in front of than behind.
!br
c)
!cb
=
fill in. There will be inserted one space in front of and one space behind the
text, the remaining room is filled in between all words.
!br
d)
!bo
otherwise
left justify. There will be appeneded as many spaces that the last space stands
on the column of the tabstop.
!br
If no type is given, it defaults to
!ul
left justify.
!sp
The delimiter character is marked with
!cu
?
in the synopsises above. This character will be immediately appended to the
filled text, if present. Thus, if the table width is 5, the first delimiter
is placed into column 6. If the
!cb
/
sign is followed by nothing (line feed) or a whitespace, the delimiter becomes
a single space; if no
!cb
/
sign is present, no delimiter is inserted; otherwise, the first character behind
the
!cb
/
sign is used. If the type of the current tabstop is
!cb
>
(right justify), the defaults are reversed, thus, if a
!cb
/
sign is present, it defaults to nothing; if none is present, it defaults to
a single space.
!sp
At default there is always a tabstop at position 0, what is the left margin
controlled by the
!cb
.in
command. That can be used to indent correcty within the
!cb
.IP
command:
!br
!in +3
.de IP
!br
.sp
!br
.cb
!br
$$0
!br
.tb
!br
.en
!br
!in -3
The remaining text will either start at the
!cb
.IN
value or will be separated by one space from the section title. The section
title itself is never filled, if the
!cb
.ju
command is enabled, because of the
!cb
.tb
command.
!sp
!ti -6
.ul - underlines the alphanumeric text in the following line(s). The
optional argument specifies the number of lines to be underlined. This
command cancels the effect of a previous
!cb
.cu
command.
!sp
!ti -6
.zz - pragma statement of
!ul
NRO.
This command allows to easily add new features to future version of
!ul
NRO
without that elder version complain about that new stuff. Of course, to add
new commands that way is not very appropriate.
!sp
Currently accepted pragma commands:
!br
!cb
letters=
specifies letters other than A-Z and a-z. All characters following the
!cb
=
sign are treated to be letters, thus, don't add whitespaces or dashes
there.
!br
!cc
.in -6
.SH "NEW FEATURES"
.in +2
.ti -2
o The font attributes "bold face" and "underline" may be used together.
.sp
.ti -2
o Added the commands: continuous bold face 
.cc !
!cb
.cb
!ct , comment
!cb
..
!ct , pragma
!cb
.zz
!ct , overstrike character
!cb
.ov
!ct , and continuous overstrike character
!cb
.cv
and concatination 
!cb
.ct
!ct .
!sp
!ti -2
o Added tabstops controled by set tabstops
!cb
.ts
!ct , and tabulate
!cb
.tb
!ct .
